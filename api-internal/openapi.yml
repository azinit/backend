openapi: '3.0.2'
info:
  title: Cardbox API Internal
  description: |-
    API for service's base logic implementation

    **NOTE:** If you have idea to simplify API - simplify it =)

    ## General

    - Supposed to use standard HTTP methods (GET, POST, PUT, PATCH, DELETE)

    - There is specified `{ data: ..., ... }` response format for future expandability

    - For a while there is no need to return error messages. They will be generated on client from error codes

        - But later - we should add this functionality from API
  version: '1.0'
servers:
  - url: https://dev-api.cardbox.ru/api/v1

paths:
  /card/list:
    post:
      summary: Get cards list
      operationId: cardsList
      tags:
        - Cards
      description: |-
        Common endpoint for few usecases:
        1. **Personal cards**
            - `POST /api/v1/card/list '{"authorId": USER_ID}'`

        2. **Search cards**
            - `POST /api/v1/card/list '{"search": SEARCH_TERM}'`
            - By title, content, tags (and maybe by author)

        - `TODO:` Add later pagination

        - `TODO:` Maybe there is should be OData-like format instead of partial params

        - `TODO:` Add later access control for card by it's visibilty and user permissions
      requestBody:
        content:
          application/json:
            schema:
              properties:
                search:
                  type: string
                  description: Full-text search
                  nullable: true
                authorId:
                  type: integer
                  description: Search by author / Get personal cards
                  nullable: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Card'
                  total:
                    type: integer
        400:
          description: Invalid params supplied
  /card/get:
    post:
      summary: Get card
      operationId: cardGet
      tags:
        - Cards
      requestBody:
        content:
          application/json:
            schema:
              properties:
                cardId:
                  type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/Card'
        400:
          description: Invalid params supplied
        404:
          description: Card not found
  /card/create:
    post:
      tags:
        - Cards
      summary: Create card
      operationId: cardCreate
      requestBody:
        description: |-
          - author = AuthToken
          - createdAt = DateTime.Now()
          - updatedAt = DateTime.Now()
        content:
          application/json:
            schema:
              properties:
                title:
                  type: string
                content:
                  type: string
                tags:
                  type: array
                  items:
                    type: string
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/Card'
        400:
          description: Invalid request. Please check data
        403:
          description: Not enough permissions
  /card/update:
    post:
      tags:
        - Cards
      summary: Update card
      description: |-
          `IMPORTANT:` There is should be check that user has required permissions for editing card
            - **For prototype**: that he is card's author
      operationId: cardUpdate
      requestBody:
        description: |-
          - Not all properties are required (title, content, tags)
          - author = AuthToken
          - createdAt = DateTime.Now()
          - updatedAt = DateTime.Now()
        content:
          application/json:
            schema:
              properties:
                cardId:
                  type: integer
                title:
                  type: string
                  nullable: true
                content:
                  type: string
                  nullable: true
                tags:
                  type: array
                  nullable: true
                  items:
                    type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/Card'
        400:
          description: Invalid request. Please check data
        403:
          description: Not enough permissions
  /card/delete:
    post:
      tags:
        - Cards
      summary: Delete card
      operationId: cardDelete
      requestBody:
        content:
          application/json:
            schema:
              properties:
                cardId:
                  type: integer
      responses:
        200:
          description: OK
        400:
          description: Invalid ID supplied
        403:
          description: Not enough permissions
  /card/favourite:
    post:
      tags:
        - Cards
      summary: Add card to favorites
      operationId: cardFavourite
      requestBody:
        content:
          application/json:
            schema:
              properties:
                cardId:
                  type: integer
      responses:
        200:
          description: OK
        400:
          description: Invalid ID supplied
        403:
          description: Not enough permissions
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          description: ID
        username:
          type: string
        firstName:
          type: string
          nullable: true
        lastName:
          type: string
          nullable: true
        bio:
          type: string
          nullable: true
        avatar:
          type: string
          nullable: true
          description: |-
            Later, can implement as `File` entity
        cards:
          type: array
          items:
            $ref: '#/components/schemas/Card'
        favorites:
          type: array
          items:
            $ref: '#/components/schemas/Card'
        socials:
          type: object
          properties:
            github:
              type: string
              nullable: true
            devto:
              type: string
              nullable: true
            twitter:
              type: string
              nullable: true
        work:
          type: string
          nullable: true
          description: |-
            Later, can implement as `Work` entity
        roles:
          type: array
          items:
            type: string
          nullable: true
          deprecated: true
          description: |-
            Later, can implement checking user permissions by `Role` entity
    Card:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        content:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        author:
          $ref: "#/components/schemas/User"
        tags:
          type: array
          items:
            type: string
          description: |-
            Later, we can create `Tag` entity 
        summary:
          type: string
          nullable: true
          deprecated: true
          description: |-
            Later, we can add this field
            For custom text-overflow (instead of truncating with emphasizing)
          
